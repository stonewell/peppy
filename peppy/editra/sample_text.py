# Generated file containing the sample text for Editra modes
sample_text={u'68k Assembly': '; Syntax Test file for 68k Assembly code\n; Some comments about this file\n.D0 00000000\nMS 2100 00000002\nMM 2000;DI\n LEA.L $002100,A1\n MOVE.L #2,-(A1)\n BSR $00002050\n\nMM 2050;DI\n MOVE.L (A1)+,D1\n MOVE.L (A1),D2\n ADD.L D1,D2\n MOVE.L D2,D0\n RTS\n\n.D0 00000000\n.D3 00000100\n.D4 00000200\n.D5 00000300\nMM 2000;DI\n CMP D3,D4\n BGE $002100\n CMP D3,D5\n BGE $002150\n MOVE.L D3,D0\n.\nMM 2100;DI\n CMP D4,D5\n BGE $002150\n MOVE.L D4,D0\n.\nMM 2150;DI\n MOVE.L D5,D0\n.\n\n.PC 2000\nTR',
 u'ActionScript': '// ActionScript Syntax Highlighting Test File\n// Comments are like this\n/** Multi-line comments are like these lines here\n *  @summary Documentation keywords are like this\n */\n\n// Hello World ActionScript 2.0\nclass com.example.Greeter extends MovieClip\n{\n    public function Greeter()\n    {\n        var txtHello:TextField = this.createTextField("txtHello", 0, 0, 0, 100, 100);\n        txtHello.text = "Hello World";\n    }\n}\n\n// Hellow World ActionScript 3.0\npackage com.example\n{\n    import flash.text.TextField;\n    import flash.display.Sprite;\n\n    public class Greeter extends Sprite\n    {\n        public function Greeter()\n        {\n            var txtHello:TextField = new TextField();\n            txtHello.text = "Hello World";\n            addChild(txtHello);\n        }\n    }\n}\n\n// Some Variable Definitions\nvar item1:String="ABC";\nvar item2:Boolean=true;\nvar item3:Number=12\nvar item4:Array=["a","b","c"];\n',
 u'Ada': '-- Syntax Highlighting test file for Ada\n-- Some Comments about this file\npragma Name (Parameter_List);\nwith Ada.Text_IO; \n\nprocedure Hello is\nbegin\n   Ada.Text_IO.Put_Line("Hello, world!");\n   Ada.Text_IO.Put_Line("Unclosed string);\nend Hello;\n\nMy_Number := 1;\n_Ilegal_Identifier := \'a\';\n',
 u'Apache Conf': '## Syntax Highlighting Test File for Apache Configuration Files\n## Comment line\n\n# Directive and Parameter\nServerType standalone\n\n# Directive and String\nServerRoot "/usr"\n\n# Directive and Number\nTimeout 300\n\n# Directive and IP number\nListen 12.34.56.78:80\n\n# Directive and Extension\nAccessFileName .htaccess\n\n# Some Extra Examples\nDefaultType text/plain\nHostnameLookups Off\nErrorLog "/private/var/log/httpd/error_log"\nLogLevel warn\n\n<IfModule mod_setenvif.c>\n    BrowserMatch "Mozilla/2" nokeepalive\n    BrowserMatch "MSIE 4\\.0b2;" nokeepalive downgrade-1.0 force-response-1.0\n    BrowserMatch "RealPlayer 4\\.0" force-response-1.0\n    BrowserMatch "Java/1\\.0" force-response-1.0\n    BrowserMatch "JDK/1\\.0" force-response-1.0\n</IfModule>\n',
 'Bash': '# Syntax Highlighting Test File for Bash\n# Comment Line\n\n# Test Assignment\nBLUE="\x1b[34;01m"\nCYAN="\x1b[36;01m"\nGREEN="\x1b[32;01m"\nRED="\x1b[31;01m"\nYELLOW="\x1b[33;01m"\nOFF="\x1b[0m"\n\necho "${YELLOW}**${OFF} Hello World in Yellow ${YELLOW}**${OFF}"\nsleep 2\n\n# Test Scalar\nHELLO=$(Hello)\nHELLO2=${Hello}\nHELLO3=`Hello`\n\n# Test Loop/Condition\nif [ \'a\' == \'a\' ]; then\n    for file in $( ls ); do\n        echo $file\n    done\nfi\n\n# Test Function Definition\nfunction quit {\n    exit\n}\n\n# Here Statement\ncat <<EOF\nThis is a multiline block for testing the\nhighlighting of a here statement\nEOF\n',
 u'Boo': '# Syntax Highlighting Test File for Boo\n# Comment line\n/* This is also a comment line but highlighting is not\n*  currently supported by Editra\n*/\n// So is this but also not currently supported\n\nimport System\nname = Console.ReadLine()\nprint "Hello, ${name}"\n\n# Class Def\nclass TestClass:\n    public Name as string\n    public Size as int\n\n# More complex class def\npublic abstract class Hello:\n    abstract def Hello():\n        print "HELLO"\n\n# Function Def\ndef fib():\n    a, b = 0L, 1L\n    while true:\n        yield b\n        a, b = b, a + b\n',
 u'C': '/** Syntax Highlighting Test File for C\n *  \\brief Doxygen tag highlighting\n */\n\n#include"stdlib.h"\n\nint main()\n{\n    int val1 = 10;\n    int val2 = val1 * 2;\n    char mychar = \'A\';\n\n    for(;;)\n    {\n        val2 = val1 - 1;\n        if(val <= 0) break;\n    }\n\n    printf("Hello World, %d + %d = %d", val1, val2, val1 + val2);\n    printf("An unclosed string and unmatched brace\n}/*End Main*/\n\n/*EOF*/\n',
 u'C#': '// C# Syntax Highlighting Test File\n// Comments are like this\n/** Multiline comments are like this\n * @summary <- Documentation Keyword\n * \\brief <- Doxygen style keyword\n */\n\nusing System;\n\n#region Foo\nclass Foo\n{\n    void Create() {}\n}\n#endregion Foo\n\n// Hello World\nclass HelloClass\n{\n    static void Main()\n    {\n        System.Console.WriteLine("Hello, world!");\n    }\n\n    public static void PrintPlusOne(int x)\n    {\n        System.Console.WriteLine(x + 1);\n    }\n}\n\n',
 'C++': '/** Syntax Highlighting test file for C++\n *  \\brief Doxygen tag highlighing\n */\n#include<iostream>\n#include<cstdlib>\n\nusing namespace std;\n\nint main(void)\n{\n    cout << "\\nHello World" << endl;\n    cout << "\\nUnclosed String << endl;\n\n    // One line comment\n    int a = 0;\n    \n    exit(a);\n}\n\nint add(int x, int y)\n{\n    return x + y;\n}\n\n// EOF\n',
 u'Caml': '(* Syntax Highlighting Test File for Caml *)\n(* Some Comments about this file *)\n\n(* Hello World *)\nprint_endline "Hello world!";;\n\n(* Calculate Fibbonacci Value of N *)\nlet rec fib n =\n  if n < 2 then 1 else fib(n-1) + fib(n-2);;\nlet main () =\n  let arg = int_of_string Sys.argv.(1) in\n  print_int(fib arg);\n  print_newline();\n  exit 0;;\nmain ();;\n\n',
 u'Cascading Style Sheet': '/* Comments About This File */\n\n/* Directive */\n@charset "iso-8859-1";\n\n/*** Plain tag definition  ***/\na { text-decoration : none; }\n\n/** Tag:psuedo class def **/\na:link { color : #456; }\n\n/** Tag/Attribute def **/\ninput[type="submit"] {\n  border: 2px #369 outset;\n  background-color: #369;\n  color: white;\n}\n\n/** Class def **/\n.tiny {\n   font-family  : "Bitstream Vera", "Vera", "Trebuchet MS", sans-serif;\n   color        : #666;\n   font-size    : 10px;\n   line-height  : 10px;\n}\n\n/*** Ids defs ***/\n#docpane {\n\twidth: 98%;\n\tpadding-top: 10px;\n\tmargin: 5px;\n}\n\n/** Syntax Error/Non WC3 compliant css **/\na:what { color: red; }\n\n/** Important **/\n.hide { display: none !important; }\n',
 u'Cobra': '# Syntax Highlighting Test File for Cobra\n# Comments look like this\n\n"""\nDocString\n\n"""\n\nclass Hello\n\n    # Class variables\n    var _name as String\n    var _verbosity = 1\n\n    def init(name as String, verbosity as Int)\n        _name = name\n        _verbosity = verbosity\n\n        .define(\'quit\', \'built-in:quit\')\n\n    def main is shared\n        print \'Hello, world.\'\n\n    def quit\n        _didQuit = true\n',
 u'ColdFusion': '<!--- Some comments about this file --->\n<!-- Support is still a work in progress -->\n\n<cfscript>\nfunction helloWorld() {\n   var greeting = "Hello World!";\n   return greeting;\n}\n</cfscript>\n\n<cfoutput>#helloWorld()#</cfoutput>\n\n<cfset Foo1 = "Hello">\n<cfset Foo2 = "Hello World">\n\n<cfoutput>\n<!--- pound signs output the returned value --->\n<p>The first position of #Foo1# in #Foo2# is #Find(Foo1,Foo2)#</p>\n</cfoutput>\n<CFSCRIPT>\n/**\n * Returns a list of all factors for a given \n * positive integer.\n * \n * @param integer   Any non negative integer greater \n *                  than or equal to 1. \n * @return          Returns a comma delimited list \n *                  of values. \n * @author Rob Brooks-Bilson (rbils@amkor.com) \n * @version 1.1, September 6, 2001 \n */\nfunction factor(integer)\n{\n  Var i=0; \n  Var Factors = "";\n  for (i=1; i LTE integer/2; i=i+1) {\n    if (Int(integer/i) EQ integer/i) {\n      Factors = ListAppend(Factors, i);\n    }\n  }\n  Return ListAppend(Factors, integer);\n}\n</CFSCRIPT>\n',
 'Csh': '# Some Comments about this file\n\necho "Hello, World!"\n\n# Look for the file specified as arg 1 and \n# say if we find it or not\nset f = $1\nforeach d (*)\n if (-e $d/$f) then\n       echo FOUND: $d/$f\n       exit(0)\n endif\nend\necho $f not found in subdirectories\n',
 u'D': '// Syntax Highlighting test file for D programming language\n// A single line comment\n/* A multi-line comment about this file.\n * Adopted from http://en.wikipedia.org/wiki/D_%28programming_language%29\n */\n \nimport std.stdio;\nint main(char[][] args)                 \n{\n    writefln("Hello World");\n \n    // Strings are denoted as a dynamic array of chars \'char[]\'\n    // auto type inference and built-in foreach\n    foreach(argc, argv; args)\n    {\n        auto cl = new CmdLin(argc, argv);    // OOP is supported\n        writefln(cl.argnum, cl.suffix, " arg: %s", cl.argv);  // user-defined class properties.\n \n        delete cl;   // Garbage Collection or explicit memory management - your choice\n    }\n \n    // Nested structs, classes and functions\n    struct specs\n    {\n        // all vars automatically initialized to 0 at runtime\n        int count, allocated;\n        // however you can choose to avoid array initialization\n        int[10000] bigarray = void;\n    }\n \n    specs argspecs(char[][] args)\n    // Optional (built-in) function contracts.\n    in\n    {\n        assert(args.length > 0);  // assert built in\n    }\n    out(result)\n    {\n        assert(result.count == CmdLin.total);\n        assert(result.allocated > 0);\n    }\n    body\n    {\n        specs* s = new specs;\n        // no need for \'->\'\n        s.count = args.length;  // The \'length\' property is number of elements.\n        s.allocated = typeof(args).sizeof; // built-in properties for native types\n        foreach(arg; args)\n            s.allocated += arg.length * typeof(arg[0]).sizeof;\n        return *s;\n    }\n \n    // built-in string and common string operations, eg. \'~\' is concatenate.\n    char[] argcmsg  = "argc = %d";\n    char[] allocmsg = "allocated = %d";\n    writefln(argcmsg ~ ", " ~ allocmsg,\n            argspecs(args).count,argspecs(args).allocated);\n    return 0;\n}\n',
 u'DOS Batch Script': 'rem Syntax Highlighting Test File for Dos Batch Scripts\nrem Comment Line\n\n:BEGIN\nset HELLO="WORLD"\nset WORLD="HELLO"\nset HELLOWORLD="%WORLD% %HELLO%"\n\nif "%1" == "/?" goto HELP\nif "%1" == "go" goto EXECUTE\n\n:HELP\necho .\necho Here is test file to show some dos batch highlighting\necho .\ngoto END\n\n:EXECUTE\necho .\necho %HELLOWORLD%\necho .\n\n:END\n',
 'DiffEdit': '--- Syntax Highlighting Test File for Diff results\n--- Comment Lines are like this\n--- cpp.cpp     2007-06-26 07:14:22.000000000 -0500\n+++ hello_diff.cpp      2007-08-06 17:01:47.000000000 -0500\n@@ -2,24 +2,29 @@\n  *\n  */\n #include<iostream>\n-#include<cstdlib>\n \n using namespace std;\n \n int main(void)\n {\n-    cout << "\\nHello World" << endl;\n+    cout << "\\nHello World!" << endl;\n     cout << "\\nUnclosed String << endl;\n \n     // One line comment\n     int a = 0;\n-    \n-    exit(a);\n+    cout << add(a, 22) << endl;\n }\n \n-int add(x, y)\n+// Add two numbers\n+int add(int x, int y)\n {\n     return x + y;\n }\n \n+// Subtract two numbers\n+int sub(int x, int y)\n+{\n+    return x - y;\n+}\n+\n // EOF',
 u'Django': '<!-- Syntax Higlighting Test File for Django -->\n<!-- Comments are like this -->\n\n<!-- base.html -->\n<html>\n    <head>\n        <title>{% block head_title %}mysite.com{% endblock %}</title>\n    </head>\n    <body>\n    </body>\n</html>\n\n<!-- application/model_index.html -->\n{% extends "base.html" %}\n{% block head_title %}{{ object.title|title }} &amp;ndash; {{ block.super }}{% endblock %}\n\n<!-- result, when {{ object.title }} was "My test entry" -->\n<html>\n    <head>\n        <title>My Test Entry &amp;ndash; mysite.com</title>\n    </head>\n    <body>\n        <p class="hello">Hello</p>\n    </body>\n</html>\n',
 u'Editra Style Sheet': '/* Syntax Highlighting Test File for Editra Style Sheets\n * Comments are like this\n */\n\ndefault_style {\n    fore: #FFFFFF;\n    back: #000000;\n    face: %(mono)s;\n    size: %(size)d;\n}\n\nkeyword_style {\n    fore: #A52B2B bold;\n    back: #F6F6F6;\n    size: %(size)d;\n}\n\n/* Definition with a bad attribute size5 */\nclass_style {\n    fore: #2E8B57 bold;\n    back: #F6F6F6;\n    size5: %(size)d;\n}\n',
 u'Edje': '// Syntax Highlighting test file for Edje\n// Some comments about this file\n/********************************************************************\n * Multi line comments are like this.\n ********************************************************************/\n#define FRAME LOSSY 60\n\nimages {\n   image: "eracnid.png"  LOSSY 80;\n   image: "shadow.png"   COMP;\n   image: "E-wavy_000001.png" FRAME;\n   image: "E-wavy_000002.png" FRAME;\n   image: "E-wavy_000003.png" FRAME;\n}\n\ncollections {\n    group {\n        name: "desktop/background";\n        parts {\n            part {\n                name: "background_image";\n                mouse_events: 0;\n                description {\n                    state: "default" 0.0;\n                    align: 0.5 0.5;\n                    image {\n                        normal: "eracnid.png";\n                    }\n                }\n            }\n            part {\n                name: "logo";\n                mouse_events: 0;\n                description {\n                    aspect: 3.33 3.33;\n                    state: "default" 0.0;\n                    min: 112 148;\n                    max: 200 269;\n                    align: 1.0 1.0;\n                    rel1 {\n                        relative: 0.796 0.355;\n                        offset: 0 0;\n                        to, "background_image";\n                    }\n                    rel2 {\n                        relative: 0.796 0.355;\n                        offset: 0 0;\n                        to, "background_image";\n                    }\n                    image {\n                        normal: "E-wavy_000001.png";\n                        tween:  "E-wavy_000002.png";\n                        tween:  "E-wavy_000003.png";\n                    }\n                }\n            }\n        }\n        programs {\n            program {\n                name: "logo_animate";\n                signal: "show";\n                source: "";\n                action: STATE_SET "default" 0.0;\n                transition: LINEAR 4.0;\n                target: "logo";\n                after: "logo_animate";\n            }\n        }\n    }\n}\n',
 u'Eiffel': '-- Syntax Highlighting Test File for Eiffel\n-- Some Comments about this file\n\nclass\n    HELLO_WORLD\ncreate\n    make\nfeature\n    make\n        do\n            io.put_string ("Hello, world!")\n            io.put_new_line\n            io.put_string(\'Unclosed String\n        end\nend\n\n-- Run the HelloWorld program\n\nprogram hello_prog\n\nroot\n\tHELLO_WORLD: "make"\ncluster\n\t"./"\nend\n\tinclude "$EIFFEL_S/library/lib.pdl"\nend -- hello_prog\n',
 u'Erlang': '%% Syntax Highlighting Test file for Erlang\n%% Some comments about this file\n\n%% quicksort:qsort(List)\n%% Sort a list of items\n-module(quicksort).\n-export([qsort/1]).\n\nqsort([]) -> [];\nqsort([Pivot|Rest]) ->\n    qsort([ X || X <- Rest, X < Pivot]) ++ [Pivot] ++ qsort([ Y || Y <- Rest, Y >= Pivot]).\n\n%% --------------------------------------------------------------------- %%\n%% Sort a list by length\n-module(listsort).\n-export([by_length/1]).\n\nby_length(Lists) ->\n    F = fun(A,B) when is_list(A), is_list(B) ->\n            length(A) < length(B)\n        end,\n    qsort(Lists, F).\n\n qsort([], _)-> [];\n qsort([Pivot|Rest], Smaller) ->\n     qsort([ X || X <- Rest, Smaller(X,Pivot)], Smaller)\n     ++ [Pivot] ++\n     qsort([ Y ||Y- Rest, not(Smaller(Y, Pivot))], Smaller).\n\n',
 u'Ferite': '// Syntax Highlighting Test File for Ferite\n// Comments are like this\n/** Multiline comments are like this\n * @summary Documentation keyword\n * \\brief Another Doc keyword\n */\n\n// Hello World\nuses "console";\nConsole.println( "Hello World" );\nConsole.println( "Unclosed String\n\n// Types\nnumber a;\nstring b;\narray c;\n\na = 2;\nb = "2";\nc = [ a, b ];\n\n// Function\nfunction f( number x ) {\n    if( x > 1 ) {\n        return f( x - 1 ) * 2;\n    }\n    return 1;\n}\nConsole.println( f(10) );\n\n// Class\nclass A {\n    string value;\n    \n    function constructor() {\n        .value = "Class.A";\n    }\n    \n    function f() {\n        return .value;\n    }\n}\n\n// Some Namespace defs\nnamespace A {\n    function f() {\n        return "A.f";\n    }\n}\n\nnamespace modifies A {\n    function g() {\n        return "A.g";\n    }\n}\n\n// Protocols\nprotocol C {\n    function getX();\n    function getY();\n}\n\nclass A implements C {\n    function getX() { return "X"; }\n    function getY() { return "Y"; }\n}\n',
 u'FlagShip': '// Syntax Highlighting test file for Flagship/XBase programming languages\n// Some comments about this file\n/* A multline comment about some stuff in this\n * file.\n */\n\n// Hello World in Clipper\n? "Hello World!"\n\n \nUSE address ALIAS adr SHARED NEW\nSET COLOR TO "W+/B,GR+/R,W/B,W/B,GR+/BG"\ncls\n@  1, 0 SAY "Id No. " GET adr->IdNum   PICT "999999" VALID IdNum > 0\n@  3, 0 SAY "Company" GET adr->Company\n@  3,35 SAY "Branch"  GET adr->Branch  WHEN  !empty(adr->Company)\n@  4, 0 SAY "Name   " GET adr->Name    VALID !empty(adr->Name)\n@  4,35 SAY "First "  GET adr->First\n@  6, 0 SAY "Country" GET adr->Country PICTURE "@!"\n@  8, 0 SAY "Zip    " GET adr->Zip     PICT "@!" VALID !empty(adr->Zip)\n@  9, 0 SAY "City   " GET adr->City\n@ 10, 0 SAY "Street " GET adr->Street\nREAD\n',
 u'Fortran 77': "*     Fortran 77 Syntax Test File\n*     Some Comments about this file\n\n*     Hello World\n\n      PROGRAM HELLOW\n        PRINT '(A)', 'Hello, world'\n        STOP\n      END\n\n*     euclid.f (FORTRAN 77)\n*     Find greatest common divisor using the Euclidean algorithm\n\n      PROGRAM EUCLID\n        PRINT *, 'A?'\n        READ *, NA\n        IF (NA.LE.0) THEN\n          PRINT *, 'A must be a positive integer.'\n          STOP\n        END IF\n        PRINT *, 'B?'\n        READ *, NB\n        IF (NB.LE.0) THEN\n          PRINT *, 'B must be a positive integer.'\n          STOP\n        END IF\n        PRINT *, 'The GCD of', NA, ' and', NB, ' is', NGCD(NA, NB), '.'\n        STOP\n      END\n\n      FUNCTION NGCD(NA, NB)\n        IA = NA\n        IB = NB\n    1   IF (IB.NE.0) THEN\n          ITEMP = IA\n          IA = IB\n          IB = MOD(ITEMP, IB)\n          GOTO 1\n        END IF\n        NGCD = IA\n        RETURN\n      END\n",
 u'Fortran 95': '! Fortran 95 Syntax Test File\n! Some comments about this file\n\n! Hello World\nprogram HelloWorld\n  write (*,*) \'Hello, world!\'   ! This is an inline comment\nend program HelloWorld\n\nprogram HelloWorld2\n      ihello = 0\n   1  if (ihello.NE.10)     ! This line shows the label style\n        write (*,*) "Hello, World2!"\n        ihello = ihello + 1\n        goto 1\n      end if\nend program HelloWord2\n   \n!----------------------------------------------------------\nsubroutine Swap_Real(a1, a2)\n\n   implicit none\n\n!  Input/Output\n   real, intent(inout) :: a1(:), a2(:)\n\n!  Locals\n   integer :: lb(1), & !Lower bound\n              ub(1)    !Upper bound\n   integer i\n   real a\n\n!  Get bounds\n   lb = lbound(a1)\n   ub = ubound(a1)\n\n!  Swap\n   do i = lb(1), ub(1)\n      a = a1(i)\n      a1(i) = a2(i)\n      a2(i) = a\n   end do\n\nend subroutine Swap_Real\n\n!----------------------------------------------------------\n',
 'Graphviz': '// Syntax Highlighting Test file for DOT\n// Some Comments about this file\n// Sample graphviz DOT file from \n// http://www.graphviz.org/Gallery/directed/cluster.html\n\ndigraph "Example" {\n\n\tsubgraph cluster_0 {\n\t\tstyle=filled;\n\t\tcolor=lightgrey;\n\t\tnode [style=filled,color=white];\n\t\ta0 -> a1 -> a2 -> a3;\n\t\tlabel = \'process #1\';\n\t}\n\n\tsubgraph cluster_1 {\n\t\tnode [style=filled];\n\t\tb0 -> b1 -> b2 -> b3;\n\t\tlabel = "process #2";\n\t\tcolor=blue\n\t}\n\tbegin -> a0;\n\tbegin -> b0;\n\ta1 -> b3;\n\tb2 -> a3;\n\ta3 -> a0;\n\ta3 -> end;\n\tb3 -> end;\n\n\tbegin [shape=Mdiamond];\n\tend [shape=Msquare];\n}\n',
 u'Groovy': '/** \n * Mortgage Calculator\n * @author: Jeremy Rayner\n * based on algorithms by Jeff Louie, Dr W Carlini and Newton\n */\n\nprintln "__..::~~\'\'\'~~::..__"\nprintln "Mortgage Calculator"\nprintln "~~~~~~~~~~~~~~~~~~~"\nprintln "Please input 3 of the 4 values in your mortgage calculation"\nprintln "This program will then calculate the value you leave blank"\nprintln ""\n\ndef variables = [\n    "Amount of mortgage" : 0.0, \n    "Annual interest rate (%)" : 0.0, \n    "Loan duration (months)" : 0.0, \n    "Monthly payments" : 0.0\n]\n\nfor (entry in variables.entrySet()) {\n    print("${entry.key}:")\n    def userInput = System.in.readLine()\n    if ("" == userInput) {\n        valueToCalculate = entry.key\n    } else {\n        entry.value = userInput.toDouble()\n    }\n}\n\nprintln "$valueToCalculate = ${calculateValueOf(valueToCalculate)}"\n\ndef calculateValueOf(valueToCalculate) {\n    def result = 0\n    def principal = variables["Amount of mortgage"]\n    def interest = variables["Annual interest rate (%)"] / 1200\n    def months = variables["Loan duration (months)"]\n    def payment = variables["Monthly payments"]\n\n    switch (valueToCalculate) {\n    case "Amount of mortgage":\n        result = 1 + interest\n        result = 1/Math.pow(result,months)\n        result = ((1-result)/interest) * payment\n        break           \n    case "Loan duration (months)":\n        result = (1 - (principal * interest / payment))\n        result = Math.log(result)\n        result = - result / Math.log(1 + interest)  \n        break\n    case "Monthly payments":\n        result = 1 + interest\n        result = 1 / Math.pow(result,months)\n        result = (principal * interest) / (1 - result)\n        break          \n    case "Annual interest rate (%)":\n        result = payment / principal\n        def diff = 100; def accuracy = 0.00001; def maxIterations = 1000\n        def index = 0\n        while ((diff > accuracy) && (index < maxIterations)) {\n            def temp = result\n            def numerator = (principal * temp / payment) + Math.pow((1 + temp), -months) - 1\n            def denominator= (principal / payment) - months * Math.pow((1 + temp), (-months - 1))\n            result = temp - (numerator / denominator)\n            diff = result - temp\n            diff = Math.abs(diff)\n            index++\n        }\n        result *= 1200\n        break           \n    }\n    return result\n}\n',
 u'Gui4Cli': "// Syntax Highlighting test file for Gui4Cli\r\n// Some Comments about this file\r\n// Note lexer only works correctly with CRLF eol chars\r\n\r\nWINDOW 10 10 180 20 'IconBar'\r\n    Winattr style clear/topmost/move/remsize/noborder/border/tool\r\n    winattr background color 200/200/220\r\n\r\n// Control\r\nif $test = 0 \r\n    cutvar buff cut char $wrapWidth buff2\r\nelse\r\n    cutvar buff cut char $test buff2\r\nendif\r\n\r\n// Event\r\nxOnKey F1\r\n\trun :somthing\r\n    lv add $somthing\r\n    add\r\n",
 u'HTML': '<!-- Syntax Highlighting Test File for Html -->\n<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">\n<html>\n   <head>\n    <!-- Some Comments about this file -->\n\t<title>Hello World</title>\n\t<link href="hello.css" rel="stylesheet" type="text/css">\n        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">\n        <script language="JavaScript" type="text/JavaScript">\n        <!-- Some Embedded JavaScript --!>\n        <!--\n        function MM_swapImgRestore() { //v3.0\n        var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;\n        }\n        //-->\n        </script>\n   </head>\n   <body>\n       <div>\n        <h1>Hello World HTML</h1>\n        <p class="bigHello">HELLO HELLO HELLO</p>\n       </div>\n   </body>\n</html>\n',
 u'HaXe': '// Syntax Highlighting Test File for haXe\n// Comments are like this\n/* Mulitline comments are like\n * this block of text\n */\n\n// Ints / Floats\n0;\n-1234;\n0xFF00;\n123.4;\n\n// Strings\n"Hello World"; \n"Unclosed String;\n\n// Constants\ntrue;\nfalse;\nnull;\n\n// Class Def\npackage my.pack;\n\nclass MyClass {\n    var id : Int;\n    static var name : String = "MyString";\n    function foo() : Void {\n    }\n    static function bar( s : String, v : Bool ) : Void {\n    }\n}\n',
 u'Haskell': '-- Syntax Highlighting test file for Haskell\n-- Some comments about this file\n\n-- Hello World in Haskell\nputStrLn "Hello, Haskell"\n\n-- Simple do structure\ndo putStrLn "What is 2 + 2?"\n    x <- readLn\n    if x == 4\n      then putStrLn "You\'re right!"\n      else putStrLn "You\'re wrong!"\n\n-- Class def\nclass Num a  where\n    (+)    :: a -> a -> a\n    negate :: a -> a\n\n-- Data Declaration\ndata Set a = NilSet \n           | ConsSet a (Set a)\n\n-- Import statement\nimport somthing\n\n-- Instance\ninstance Num Int  where\n    x + y       =  addInt x y\n    negate x    =  negateInt x\n\n-- Module\nmodule Tree ( Tree(Leaf,Branch), fringe ) where\n \ndata Tree a                = Leaf a | Branch (Tree a) (Tree a) \n \nfringe :: Tree a -> [a]\nfringe (Leaf x)            = [x]\nfringe (Branch left right) = fringe left ++ fringe right\n\n',
 u'Inno Setup Script': '; Syntax Highlighting Test File for Inno Setup Scripts\n; Some comments about this file\n\n; Preprocessor \n#pragma verboselevel 9\n#define Debug\n\n; Sections\n[Setup]\nAppName=My Program\nAppVerName=My Program version 1.5\nDefaultDirName={code:MyConst}\\My Program\nDefaultGroupName=My Program\nUninstallDisplayIcon={app}\\MyProg.exe\nInfoBeforeFile=Readme.txt\nOutputDir=userdocs:Inno Setup Examples Output\n\n[Files]\nSource: "MyProg.exe"; DestDir: "{app}"; Check: MyProgCheck; BeforeInstall: BeforeMyProgInstall(\'MyProg.exe\'); AfterInstall: AfterMyProgInstall(\'MyProg.exe\')\nSource: "MyProg.chm"; DestDir: "{app}"; Check: MyProgCheck; BeforeInstall: BeforeMyProgInstall(\'MyProg.chm\'); AfterInstall: AfterMyProgInstall(\'MyProg.chm\')\nSource: "Readme.txt"; DestDir: "{app}"; Flags: isreadme\n\n[Code]\nvar\n  MyProgChecked: Boolean;\n  MyProgCheckResult: Boolean;\n  FinishedInstall: Boolean;\n\nfunction InitializeSetup(): Boolean;\nbegin\n  Result := MsgBox(\'InitializeSetup:\' #13#13 \'Setup is initializing. Do you really want to start setup?\', mbConfirmation, MB_YESNO) = idYes;\n  if Result = False then\n    MsgBox(\'InitializeSetup:\' #13#13 \'Ok, bye bye.\', mbInformation, MB_OK);\nend;\n',
 u'IssueList': '; Syntax Highlighting Test file for IssueList\n; Comments look like this\n\n+ This item is done\n- This is still open\n; This is a cancelled item, so it is shown in gray\n? This item still needs to be clarified\n  There are some questions open to solve it.\n  In detail:\n  - Is it too expensive ?\n  + Can it technically be done ?\n\n- Technically it is quite challenging,\n  and some details are yet open.\n  But can be surely solved.\n\nSo there are some more colors:\n\n# for maybe something important\n. Because blue looks cool\n\n~ This could be used for deep-red items or so\n\n;;; Local Variables:\n;;; mode: outline\n;;; End:\n',
 u'Java': '// Syntax Highlighting Test File For Java\n// Comment Line\n\n/*\n * HelloWorld Using Swing\n */\nimport javax.swing.*;        \n\npublic class HelloWorldSwing {\n    /**\n     * Create the GUI and show it.  For thread safety,\n     * this method should be invoked from the\n     * event-dispatching thread.\n     */\n    private static void createAndShowGUI() {\n        //Create and set up the window.\n        JFrame frame = new JFrame("HelloWorldSwing");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        //Add the ubiquitous "Hello World" label.\n        JLabel label = new JLabel("Hello World");\n        frame.getContentPane().add(label);\n\n        //Display the window.\n        frame.pack();\n        frame.setVisible(true);\n    }\n\n    public static void main(String[] args) {\n        //Schedule a job for the event-dispatching thread:\n        //creating and showing this application\'s GUI.\n        javax.swing.SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                createAndShowGUI();\n            }\n        });\n    }\n}\n',
 u'JavaScript': '// Syntax Highlighting Test File for JavaScript\n// Some Comments about this file\n\nfunction HelloAlert ()\n{\n    alert("Hello World!")\n}\n\nfunction count(to)\n{\n    for (i = 0; i <= to; i++)\n    {\n        document.write("The number is " + i)\n        document.write("<br />")\n    }\n}\n',
 u'Kix': '; Syntax Highighting test file for KIXtart scripts\n; Some comments about this file\n\nDim $Type, $S, $J, $R\n\nIf KeyExist("HKCU\\Software\\Hello") = 1\n    $Type = Readtype("HKCU\\Software\\Hello","World")\n    $R = ReadValue("HKCU\\Software\\Hello", "World2")\n\t     \n     Select \n         Case $Type = "Reg_Multi_SZ"\n                 $S = Split($R,"|")\n                 $J = Join($S," ")\n         Case $Type = "Reg_SZ"\n                 $J = $R\n         Case 1\n                 @Error = 5\n     EndSelect\n\n    If $J = "HelloWorld"\n         ? "We have a match. The string returned was: " $J\n    Else\n         ? "No match found. The string returned was: " $J\n    EndIf\nElse\n\t     Exit 1\nEndIf\n',
 'Ksh': '# Syntax Highlighting Test File for Korn Shell\n# Some comments about this file\n\nexport FRIENDS="Jon Kosuke Bill Sandra"\nfor FRIEND in ${FRIENDS}\ndo\n  # each loop say hello\n  echo "HELLO " $FRIEND\ndone\n\nexit 0\n',
 u'LaTeX': '% Syntax Highlighting Test File For LaTeX\n% Some Comments About This File\n\\documentclass{article}\n\\title{Lets Say Hello}\n\\author{Jane Doe}\n\\date{April 2007}\n\\begin{document}\n   \\maketitle\n   Hello world!\n\\end{document}\n',
 u'Lisp': '; Syntax Highlighting Test File for Lisp\n; Comment Line\n\n; Lisp funciton and keyword test\n(defpackage :mypackage\n  (:use :common-lisp :cffi))\n\n; hello version 1\n(defun hello-word1 ()\n  (print (list \'HELLO \'WORLD)))\n\n; hello version 2\n(defun hello-world ()\n  (format t "hello world~%"))\n\n; Lets do some factorials too\n(defun factorial (N)\n  (if (= N 1)\n      1\n    (* N (factorial (- N 1)))))\n\n; Fibonacci numbers are fun too\n(defun fibonacci (N)\n  (if (or (zerop N) (= N 1))\n      1\n    (+ (fibonacci (- N 1)) (fibonacci (- N 2)))))\n',
 u'Lout': ' # Lexer Test File for Basser Lout\n # http://en.wikipedia.org/wiki/Lout\n # Some Comments about this file\n \n # Use the `doc\' document class and its default style.\n @SysInclude { doc }\n \n @Document\n   @InitialFont { Times Base 10p }\n //\n \n # Beginning of document contents.\n @Text @Begin\n \n # Paragraph with a number of differen\'t keywords, symbols and strings in it\n @PP\n Hello Word this is a paragraph.  One can easily embed @B { bold } or\n @I { italic } text.  One can also easily change the style of \n text, such as { Helvetica Base } @Font { changing the font\n being used } Here is a string @Code "@Font" and a string that\n is not closed @Code "@Font.\n \n @BeginSections\n @Section @Title { The First Section }\n @Begin\n \n @PP\n This is the content of a section.\n \n @End @Section\n @EndSections\n \n @End @Text\n # End of the document.\n',
 u'Lua': '-- Lua Syntax Test File\n-- Some comments about this file\n\n-- Hello World Program\nprint "Hello World"\nprint "An Open String\n\n-- Factorial Calculator\nfunction factorial(n)\n  if n == 0 then\n    return 1\n  end\n  return n * factorial(n - 1)\nend\n\n-- Fibonacci Numbers\nfibs = { 1, 1 }\nsetmetatable(fibs, {\n  __index = function(name, n)\n    name[n] = name[n - 1] + name[n - 2] \n    return name[n]\n  end\n})\n\n-- string buffer implementation\nfunction newbuf ()\n  local buf = {\n    _buf = {},\n    clear =   function (self) self._buf = {}; return self end,\n    content = function (self) return table.concat(self._buf) end,\n    append =  function (self, s)\n      self._buf[#(self._buf) + 1] = s\n      return self\n    end,\n    set =     function (self, s) self._buf = {s}; return self end,\n  }\n  return buf\nend',
 u'MASM': "; Syntax Highlighting Test File for MASM\n; Comment Line's are like this\n; Hello world in MASM Assembly\n.MODEL tiny\n.CODE\n        ORG 100h\nHELLO          PROC\n        MOV     AH,09h\n        LEA     DX,msg\n        INT     21h                     ;Display Hello World\n\n        MOV     AX,4C00h                ;Exit to DOS\n        INT     21h\nHELLO          ENDP\n        msg     DB      'Hello World$'\n        END     HELLO\n\n\n\n ",
 u'Makefile': '# Syntax Highlighting Test File for Makefile\n# Some more comments about this file\n\n# Some Identifiers and Preproccessor stuff\n!ifndef DEBUG\nCFLAGS=-DDEBUG -g $(CFLAGS)\n!else\nCFLAGS=-Os $(CFLAGS)\n!endif\n\n# Some Targets\nhelloworld: helloworld.o\n\t\tcc -o $@ $<\n\nhelloworld.o: helloworld.c\n\t\tcc -c -o $@ $<\n\n.PHONY: clean\nclean:\n\t\trm -f helloworld helloworld.o *~ core\n',
 u'Mako': '# Syntax Highlighting Test File for Mako Templates\n# Comments are like this\n\n<%def name="label(field, content)">\n<label for="${field}">${content}</label>\n</%def>\n\n<%def name="make_option(opt)">  \n <%\n     import os  \n     from mako.template import Template  \n       \n     f = open("%s/templates/pages/admin/options/%s" \\  \n           % (c.root, opt)).read()  \n     return Template(f).render()  \n %>  \n</%def> \n',
 u'Matlab': "% Syntax Highlight Test File for MatLab\n% Some comments about this file\n\n% HelloWorld in MatLab\ndisp('Hello World');\n\n% And now some other randomness to test different color regions\nfor j=1:4,\n   j\nend\n\nA = 1;   B = [];\nif(A|B) disp 'The statement is true',  end;\n\n% Plotting Polynomials\nx=[27.7 28 29 30];\na=[4.1 4.3 4.1];\nb=[0.749 0.503 -0.781];\nc=[0.0 -0.819 -0.470];\nd=[-0.910 0.116 0.157];\n\nfor i=1:3\n   ['p_' num2str(i) '(x) = ' num2str(a(i)) ' + ' ...\n         num2str(b(i)) ' (x - ' num2str(x(i)) ') + ' ...\n         num2str(c(i)) ' (x - ' num2str(x(i)) ')^2 + ' ...\n         num2str(d(i)) ' (x - ' num2str(x(i)) ')^3']\nend;\n\n%---------------------------------------------------------------------\nfunction y = nev(xx,n,x,Q)\n% NEV   Neville's algorithm as a function\n%       y= nev(xx,n,x,Q)\n%\n% inputs:\n%    n = order of interpolation (n+1 = # of points)\n%    x(1),...,x(n+1)    x coords\n%    Q(1),...,Q(n+1)    y coords\n%    xx=evaluation point for interpolating polynomial p\n%\n% output:  p(xx)\nfor i = n:-1:1\n   for j = 1:i\n      Q(j) = (xx-x(j))*Q(j+1) - (xx-x(j+n+1-i))*Q(j);\n      Q(j) = Q(j)/(x(j+n+1-i)-x(j));\n   end\nend\n\ny = Q(1);",
 u'Microsoft SQL': "-- MS SQL test code for lexer\nCREATE TABLE page (\n        id              INT NOT NULL AUTO_INCREMENT,\n        pagename        VARCHAR(100) NOT NULL,\n        hits            INT NOT NULL DEFAULT 0,\n        pagedata        TEXT NOT NULL DEFAULT '',\n        cached_html \tTEXT NOT NULL DEFAULT '',   -- added with 1.3.11\n        PRIMARY KEY (id),\n        UNIQUE (pagename)\n);\n\nCREATE TABLE version (\n     id              INT NOT NULL,\n     version         INT NOT NULL,\n     mtime           INT NOT NULL,\n     minor_edit      TINYINT DEFAULT 0,\n     content         TEXT NOT NULL DEFAULT '',\n     versiondata     TEXT NOT NULL DEFAULT '',\n     PRIMARY KEY (id,version)\n);\nCREATE INDEX version_mtime ON version (mtime);\n\nCREATE TABLE recent (\n\tid              INT NOT NULL,\n\tlatestversion   INT,\n\tlatestmajor     INT,\n\tlatestminor     INT,\n        PRIMARY KEY (id)\n);\n\nCREATE TABLE nonempty (\n\tid              INT NOT NULL,\n\tPRIMARY KEY (id)\n);\n\nCREATE TABLE link (\n\tlinkfrom        INT NOT NULL,\n        linkto          INT NOT NULL\n);\nCREATE INDEX linkfrom ON link (linkfrom);\nCREATE INDEX linkto ON link (linkto);\n\nCREATE TABLE session (\n    \tsess_id \tCHAR(32) NOT NULL DEFAULT '',\n    \tsess_data \tBLOB NOT NULL,\n    \tsess_date \tINT UNSIGNED NOT NULL,\n    \tsess_ip \tCHAR(40) NOT NULL,\n    \tPRIMARY KEY (sess_id)\n);\nCREATE INDEX sessdate_index ON session (sess_date);\nCREATE INDEX sessip_index ON session (sess_ip);\n\n-- Optional DB Auth and Prefs\n-- For these tables below the default table prefix must be used\n-- in the DBAuthParam SQL statements also.\n\nCREATE TABLE pref (\n  \tuserid \tCHAR(48) NOT NULL UNIQUE,\n  \tprefs  \tTEXT NULL DEFAULT '',\n  \tpasswd \tCHAR(48) DEFAULT '',\n\tgroupname CHAR(48) DEFAULT 'users',\n  \tPRIMARY KEY (userid)\n);\n-- update to 1.3.12: (see lib/upgrade.php)\n-- ALTER TABLE pref ADD passwd \tCHAR(48) DEFAULT '';\n-- ALTER TABLE pref ADD groupname CHAR(48) DEFAULT 'users';\n\n-- better use the extra pref table where such users can be created easily\n-- without password.\n--CREATE TABLE user (\n--  \tuserid \tCHAR(48) NOT NULL UNIQUE,\n--  \tpasswd \tCHAR(48) DEFAULT '',\n--\tprefs  \tTEXT NULL DEFAULT '',\n--\tgroupname CHAR(48) DEFAULT 'users',\n--  \tPRIMARY KEY (userid)\n--);\n\n--CREATE TABLE member (\n--\tuserid    CHAR(48) NOT NULL,\n--   \tgroupname CHAR(48) NOT NULL DEFAULT 'users',\n--   \tINDEX (userid),\n--   \tINDEX (groupname)\n--);\n--CREATE INDEX member_userid ON member (userid);\n--CREATE INDEX member_groupname ON member (groupname);\n\n-- only if you plan to use the wikilens theme\nCREATE TABLE rating (\n        dimension INT(4) NOT NULL,\n        raterpage INT(11) NOT NULL,\n        rateepage INT(11) NOT NULL,\n        ratingvalue FLOAT NOT NULL,\n        rateeversion INT(11) NOT NULL,\n        tstamp TIMESTAMP(14) NOT NULL,\n        PRIMARY KEY (dimension, raterpage, rateepage)\n);\nCREATE INDEX rating_dimension ON rating (dimension);\nCREATE INDEX rating_raterpage ON rating (raterpage);\nCREATE INDEX rating_rateepage ON rating (rateepage);\n\n-- if ACCESS_LOG_SQL > 0\n-- only if you need fast log-analysis (spam prevention, recent referrers)\n-- see http://www.outoforder.cc/projects/apache/mod_log_sql/docs-2.0/#id2756178\nCREATE TABLE accesslog (\n        time_stamp    INT UNSIGNED,\n\tremote_host   VARCHAR(50),\n\tremote_user   VARCHAR(50),\n        request_method VARCHAR(10),\n\trequest_line  VARCHAR(255),\n\trequest_args  VARCHAR(255),\n\trequest_file  VARCHAR(255),\n\trequest_uri   VARCHAR(255),\n\trequest_time  CHAR(28),\n\tstatus \t      SMALLINT UNSIGNED,\n\tbytes_sent    SMALLINT UNSIGNED,\n        referer       VARCHAR(255),\n\tagent         VARCHAR(255),\n\trequest_duration FLOAT\n);\nCREATE INDEX log_time ON accesslog (time_stamp);\nCREATE INDEX log_host ON accesslog (remote_host);\n-- create extra indices on demand (usually referer. see plugin/AccessLogSql)\n\nALTER TABLE ticket_history ADD FOREIGN KEY (ticket_id) REFERENCES `ticket(id)`;\nALTER TABLE ticket_history_type ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE ticket_history_type ADD FOREIGN KEY (change_by) REFERENCES `system_user(id)`;\nALTER TABLE ticket_history_type ADD FOREIGN KEY (valid_id) REFERENCES `valid(id)`;\nALTER TABLE article_type ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE article_type ADD FOREIGN KEY (change_by) REFERENCES `system_user(id)`;\nALTER TABLE article_type ADD FOREIGN KEY (valid_id) REFERENCES `valid(id)`;\nALTER TABLE article_sender_type ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE article_sender_type ADD FOREIGN KEY (change_by) REFERENCES `system_user(id)`;\nALTER TABLE article_sender_type ADD FOREIGN KEY (valid_id) REFERENCES `valid(id)`;\nALTER TABLE article_flag ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE article ADD FOREIGN KEY (article_sender_type_id) REFERENCES `article_sender_type(id)`;\nALTER TABLE article ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE article ADD FOREIGN KEY (change_by) REFERENCES `system_user(id)`;\nALTER TABLE article ADD FOREIGN KEY (valid_id) REFERENCES `valid(id)`;\nALTER TABLE article ADD FOREIGN KEY (article_type_id) REFERENCES `article_type(id)`;\nALTER TABLE article ADD FOREIGN KEY (ticket_id) REFERENCES `ticket(id)`;\nALTER TABLE article_plain ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE article_plain ADD FOREIGN KEY (change_by) REFERENCES `system_user(id)`;\nALTER TABLE article_plain ADD FOREIGN KEY (article_id) REFERENCES `article(id)`;\nALTER TABLE article_attachment ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE article_attachment ADD FOREIGN KEY (change_by) REFERENCES `system_user(id)`;\nALTER TABLE article_attachment ADD FOREIGN KEY (article_id) REFERENCES `article(id)`;\nALTER TABLE standard_response ADD FOREIGN KEY (create_by) REFERENCES `system_user(id)`;\nALTER TABLE standard_response ADD FOREIGN KEY (change_by) REFERENCES `system_user(id)`;\nALTER TABLE standard_response ADD FOREIGN KEY (valid_id) REFERENCES `valid(id)`;",
 u'Netwide Assembler': '; Syntax Highlighting Test File for NASM\n; Some Comments about this file\n; Hello World in NASM\n\nsection .text\n\n_start:\n    push    dword len\n    push    dword msg\n    push    dword 1\n    mov     eax, 0x4\n    call    _syscall\n    add     esp, 12\n\n    push    dword 0\n    mov     eax, 0x1\n    call    _syscall\n\n_syscall:\n    int     0x80\n    ret\n\nmsg db      "Hello World",0xa\nlen equ     $ - msg\n',
 u'Nullsoft Installer Script': '; Syntax Highlighting Test File for NSIS\r\n; Comments are Like this\r\n# Comments can also be like this\r\n\r\n; Function and String\r\n!define PRODUCT_NAME "HelloWorld"\r\n\r\n; Function and Label\r\nSetCompressor lzma\r\n\r\n; Section Definition\r\nSection "MainSection" SEC01\r\n  SetOutPath "$INSTDIR"\r\n  SetOverwrite try\r\n  \r\nSectionEnd\r\n\r\n; Section, Function, Variable, String\r\nSection -Post\r\n  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"\r\nSectionEnd\r\n\r\n; Function Definition\r\nFunction LaunchHello\r\n  Exec \'"$INSTDIR\\hello.exe"\'\r\nFunctionEnd\r\n',
 u'Objective C': '// Syntax Highlighting Test File for Objective C\n// Comments are like this\n/* Multi line comments are like\n * this\n */\n\n// Hello World\n#import <stdio.h>\n\nint main( int argc, const char *argv[] ) {\n    printf( "Hello World\\n" );\n    printf( "Unclosed string );\n    return 0;\n}\n\n// Interface\n#import <Foundation/NSObject.h>\n\n@interface Fraction: NSObject {\n    int numerator;\n    int denominator;\n}\n\n-(void) print;\n-(void) setNumerator: (int) d;\n-(void) setDenominator: (int) d;\n-(int) numerator;\n-(int) denominator;\n@end\n\n// Class implementation\n#import "Fraction.h"\n#import <stdio.h>\n\n@implementation Fraction\n-(void) print {\n    printf( "%i/%i", numerator, denominator );\n}\n\n-(void) setNumerator: (int) n {\n    numerator = n;\n}\n\n-(void) setDenominator: (int) d {\n    denominator = d;\n}\n\n-(int) denominator {\n    return denominator;\n}\n\n-(int) numerator {\n    return numerator;\n}\n@end\n\n',
 u'Octave': '# Syntax Highlight Test File for Octave\n# Some comments about this file\n\n# HelloWorld in Octave\nprintf("Hello World\\n")\n\na = [ 1, 1, 2; 3, 5, 8; 13, 21, 34 ]\n\nfunction s = plus (varargin)\n  if (nargin==0)\n    s = 0;\n  else\n    s = varargin{1} + plus (varargin{2:nargin});\n  endif\nendfunction\n',
 u'PHP': '<?php\n    // Syntax Highlighting Test File for PHP\n    /* Some comments about this file */\n    // Comment line\n    $hello = "HELLO"\n    $world = "WORLD"\n\n    include_once($hello_root_path . \'hellolib.php\');\n\n    function print_mood()\n    {\n        switch($_GET[\'friendly\'])\n        {\n            case "yes":\n                echo "<h1>$hello $world</h1>";\n                break;\n            case "no":\n                echo "<h1>Bah!!</h1>"\n                break;\n            default:\n                echo "<h1>$hello???</h1>";\n        } \n    }\n\n    /* Class Definition Test */\n    class Foo\n    {\n        var $myvalue;\n\n        function bar()\n        {\n            if (isset($this))\n            {\n                echo \'$this is defined (\';\n                echo get_class($this);\n                echo ")\\n";\n            } else {\n                echo "\\$this is not defined.\\n";\n            }\n        }\n        function helloA(param) {\n            echo "$param";\n        }\n        function printEndTag() {\n            echo "?>"\n        }\n        function printStartTag() {\n            echo "<?php"\n        }\n\n    }\n\n    function hello(param) {\n        echo "$param";\n    }\n?>\n\n<html>\n   <head>\n      <!-- Some Embedded HTML -->\n      <title>Hello.php</title>\n   </head>\n   <body>\n      <div>\n        <p>Today is <?php disp_date() ?> and this website says <?php print_mood() ?></p>\n      </div>\n   </body>\n</html>\n\n',
 u'PL/SQL': "/**\n * Syntax Highlighting Test File for PLSQL\n * This is a package example for syntax colourising of\n * Oracle PL/SQL 11g\n * It is developed to meet at least my requirements.\n * Copyright 2007 Thomas G. Keul\n * @author Thomas G. Keul (tgkeul@web.de)\n */\n\n /**\n  * Example pldoc header of a procedure.\n  *\n  * @param param_1  in parameter\n  * @param param_2  out parameter\n  * @param param_3  in out parameter\n  * @throws no_data_found\n  */\n procedure my_proc\n   (param_1  in my_table.the_key%type,\n    param_2 out my_table%rowtype,\n    param_3  in out nocopy plsql_table_type);\n\n /**\n  * Example pldoc header of a function.\n  *\n  * @param   param_1  in parameter\n  * @return  true or false\n  */\n function my_func (param_1 in pls_integer) return boolean;\nend example\n/\n\ncreate or replace package body example is\n\n type t_boolean_table is table of boolean index by binary_integer;\n subtype t_sample is positive range 1..6;\n real_sample constant t_sample := 3;\n\n cursor get_it (param_1 in varchar2) is\n  select /*+ a Hint */\n         distinct foo\n    from bar\n   where the_key = param_1\n     and a_column is not null;\n\n procedure nested_outer (param_1 in number) is\n   procedure nested_inner is\n   begin\n     if a_collection.count > 0\n     then\n       for l in a_collection.first .. a_collection.last\n       loop\n         doit;                 -- just for fun\n       end loop;\n     elsif its_a_rainy_day\n     then help (who => me);\n     else sigh;\n     end if;\n   end nested_inner;\n\n begin\n   update a_table\n      set a_column = 1\n    where the_key = 4711\n   returning something bulk collect into a_collection;\n\n   << a_label >>\n   for ex in 1..3\n   loop\n     case ex\n       when 1 then dbms_output.put_line ('number one');\n       when 2 then junk := greatest (ex, nvl(foo, bar));\n       when 3 then exit (a_label);\n       else rollback;\n     end case;\n   end loop a_label;\n\n exception\n   when no_data_found then null;\n   when others then raise;\n end nested_outer;\n\nbegin\n oops := 'no string eol';\nend example;\n/\n-- -----------------------------------------------------------\ndeclare\n d date := sysdate;\nbegin\n dbms_output.put_line (to_char (sysdate, 'DD.MM.YYYY'));\nend;\n-- -----------------------------------------------------------\nexec dbms_job.run(4711);\n",
 u'Pascal': "{ Syntax Highlighting Test File for Pascal\n  Comments are like this\n  Hello World in Pascal\n}\nprogram Hello;\n \nuses\n   crt;\n \nbegin\n   ClrScr;\n   Write('Hello world');\n   Readln;\nend.\n\nprogram Variables;\n\nconst\n   pi: Real = 3.14;\n\nvar\n   Num1, Num2, Ans: Integer;\n \nbegin\n   Ans := 1 + 1;\n   Num1 := 5;\n   Ans := Num1 + 3;\n   Num2 := 2;\n   Ans := Num1 - Num2;\n   Ans := Ans * Num1;\nend.\n",
 u'Perl': '# Syntax Highlighting test file for Perl\n# Some comments about this file\n\n# Hello world in Perl\nprint "Hello, world!\\n";\n\n# Numerous other style region tests\n\n# Number\n$number1 = 42;\n\n# String Tests\n$answer = "The answer is $number1";  # Variable interpolation\n$h1  = "Hello World \\"Perl\\""; # Double quoted string\n$h2  = \'Hello World "Perl"\';  # Single Quoted String\n$h3  = qq(Hello World "Perl"); # qq() instead of quotes\n$multilined_string =<<EOF\nA multilined string that is terminated with\nwith the word "EOF"\nEOF\n\n# Array\n@greetings = (\'Hello\', \'Holla\', \'Konichiwa\');\n\n# Hash Table\n%translate = (\n    Hello => \'Hola\',\n    Bye => \'Adios\'\n);\nprint $translate[Hello];\n\n=item B<function1>\n\nThis is a POD doc section\n\n=cut\nsub function1 { \n  my %args = @_;\n  print "Joe said \'$args{Joe}\'\\n";\n}\nfunction1( Joe => "Hello World" );\n\n# Some Regular Expressions\n$x =~ m/abc/\n$x =~ s/abc/aBc/;   # substitute lowercase b with uppercase B\n',
 u'Pike': '// Syntax Highlighting test file for Pike\n/* Some Comments about this file */\n\n// Hello world in Pike\nint main() {\n    write("Hello world!\\n");\n    return 0;\n}\n\n//! \\todo <- Documentation Doxygen Keyword highlighting\nmixed something;\nsomething = 5;\nsomething = 2.5;\n\nstring testString;\ntestString = "a regular string";\ntestString = "an open string\n\n// Print a list of unique characters\nstring data = "an apple a day";\narray(string) chars = data/"";\nmapping(string:int) seen = ([]);\n\nforeach(chars ;; string char)\n  seen[char]++; \n\nwrite("unique chars are: %s\\n", sort(indices(seen))*"");\n\n',
 u'Postscript': '%!PS\n% Syntax Higlighting Test File for Postscript\n% Comments are like this\n% Hello World in Postscript\n1.00000 0.99083 scale\n/Courier findfont 12 scalefont setfont\n0 0 translate\n/row 769 def\n85 {/col 18 def 6 {col row moveto (Hello World)show /col col 90 add def}\nrepeat /row row 9 sub def} repeat\nshowpage save restore\n',
 u'Progress 4GL': '/* Syntax highlight test file for Progress 4GL */\n\nDEFINE TEMP-TABLE tt\n FIELDS site like ld_site\n FIELDS loc like ld_loc\n FIELDS part like ld_part\n FIELDS lot like ld_lot\n FIELDS ref like ld_ref\n FIELDS ldt like ld_date\n FIELDS ldst like ld_status\n FIELDS qoh like ld_qty_oh\n FIELDS coh like ld_cust_consign_qty.\n\nINPUT FROM "ld-ncstkinconsignloc.d".\n REPEAT TRANSACTION.\n CREATE tt.\n IMPORT tt.\nEND.\n INPUT CLOSE.\n\nOUTPUT TO "cyc-amt-02.d".\nFOR EACH tt:\n     FINF FIRST pt_mstr WHERE pt_part = part NO-LOCK NO-ERROR.\n\n   FIND FIRST pl_mstr WHERE pl_prod_line = pt_prod_line NO-LOCK NO-ERROR.\n     FIND FIRST sct_det where sct_sim = "standard"\n     AND sct_site = "g1"\n     AND sct_part = part NO-LOCK NO-ERROR.\n     EXPORT site loc part lot ref \n     pt_prod_line\n     pl_inv_acct\n     pl_inv_cc\n     qoh sct_cst_tot qoh * sct_cst_tot.\nEND.\n',
 u'Properties': "# Syntax Highlighting Test file for Properties Files\n# Some comments about this file\n\n# Section Def\n[greetings]\nhello=1\nworld=2\n\n[food]\ncheese=('gouda', 'swiss')\nbread=('french', 'italian', 'sliced')\nmeat=('steak', 'pork')\nfish=('salmon', 'tuna')\nfruit=('apple', 'orange', 'watermelon')\n",
 u'Python': '# Syntax Highlight Test File for Python\n# Some Comments about this file\n\n"""\nA test file for checking styles for the python highlighter.\nThis is a docstring\n\n"""\n__author__ = "Cody Precord"\n\n# Keyword statement\nimport sys\n\n# Function Definition\ndef say_hello():\n    """Prints hello world to the console"""\n    print "Hello World"\n    print "unclosed string\n\n# Class Definition\nclass Greeting:\n    """A class to represent a greeting"""\n    def __init__(self, language):\n        """initializes the greeting"""\n        self._lang = language\n\n    def __str__(self):\n        """Returns the string representation of the greeting"""\n        if self._lang == "English":\n            return "Hello"\n        elif self._lang == "Spanish":\n            return "Holla"\n        else:\n            return "Sorry I dont know %s" % self._lang\n\n    # Decorator\'s (python 2.4+)\n    @property\n    def classdocs(self):\n        return \'\\n\'.join([ x.__doc__ for x in dir(self) if hasattr(x, \'__doc__\')])\n\nif __name__ == \'__main__\':\n    say_hello()\n    print Greeting(\'English\')\n',
 u'R': '# Syntax Highlighting test file for R\n# Comments look like this\n\noptions(digits=7)\n\n## powers\nouter(a <- -4:12,     -2:7, "^")\n\nfor (n1 in 1:7)\n    print(zapsmall(polyroot(1:n1), digits = 10))\n\n## lowess() {incl. sort, etc}:\noptions(digits = 5)\n\nlowess(c(3,2,6,3,8,4))$y # this used to differ on Linux\n\ny1 <- c(3,1:2,5:2,4,1:3,3)\nlowess(y1)$y\nlowess(y1, f = .4)$y\n\nlowess(c(y1,100), f = .4)$y\n\n## this is the test sample from Cleveland\'s original lowess.doc:\nx <- c(1:5, rep(6,10),8,10,12,14,50)\ny <- c(18,2,15,6,10,4,16,11,7,3,14,17,20,12,9,13,1,8,5,19)\nlowess(x,y, f = .25, iter = 0, delta = 0)$y\nlowess(x,y, f = .25, iter = 0, delta = 3)$y\nlowess(x,y, f = .25, iter = 2, delta = 0)$y\n',
 u'Ruby': '# Syntax Highlighting Test File for Ruby\n# Some Comments about this file\n# Hello World in ruby\n\n# Keyword statement and string\nputs \'Hello world\'\n\n# Function Definitions\ndef hello2(name)\n    puts "Hello #{name}!"\nend\n\n# Class Definition\nclass Greeter\n    def intialize(name = "World")\n        @name = name\n    end\n    def say_hello\n        puts "Hello #{@name}!"\n    end\n    def say_bye\n        puts "Bye #{@name}, come again."\n    end\nend\n\n# Keyword and some Numbers\nputs 5 ** 2\n',
 u'S': '# Syntax Highlighting test file for S\n# Comments look like this\n\noptions(digits=7)\n\n## powers\nouter(a <- -4:12,     -2:7, "^")\n\nfor (n1 in 1:7)\n    print(zapsmall(polyroot(1:n1), digits = 10))\n\n## lowess() {incl. sort, etc}:\noptions(digits = 5)\n\nlowess(c(3,2,6,3,8,4))$y # this used to differ on Linux\n\ny1 <- c(3,1:2,5:2,4,1:3,3)\nlowess(y1)$y\nlowess(y1, f = .4)$y\n\nlowess(c(y1,100), f = .4)$y\n\n## this is the test sample from Cleveland\'s original lowess.doc:\nx <- c(1:5, rep(6,10),8,10,12,14,50)\ny <- c(18,2,15,6,10,4,16,11,7,3,14,17,20,12,9,13,1,8,5,19)\nlowess(x,y, f = .25, iter = 0, delta = 0)$y\nlowess(x,y, f = .25, iter = 0, delta = 3)$y\nlowess(x,y, f = .25, iter = 2, delta = 0)$y\n',
 u'SQL': "/******************************************\n* Syntax Highlighting Test File for SQL   *\n* Multi-Line Comment Block                *\n* Oracle 9i SQL                           *\n*******************************************/\n--- Single Line Comments are like this\n\n--- Drop all tables, in case they were previously created ---\nDROP TABLE shipment;\nDROP TABLE customer;\nDROP TABLE truck;\nDROP TABLE city;\n\n--- Create the customer table ---\nCREATE TABLE customer\n(\n\tCUS_ID\t     Char(4) CONSTRAINT cus_id_pk PRIMARY KEY,\n\tCUS_LNAME    Varchar2(20),\n\tCUS_FNAME    Varchar2(20),\n\tANN_REVENUE  Number(12,2),\n\tCUS_TYPE     Char(1)\n);\n\n--- Create the truck table ---\nCREATE TABLE truck\n(\n\tTRUCK_ID     Char(4)\t   CONSTRAINT truck_id_pk PRIMARY KEY,\n\tDRIVER_NAME  Varchar2(40)\n);\n\n--- Create the city table ---\nCREATE TABLE city\n(\n\tCITY_ID\t     Varchar2(4)   CONSTRAINT city_id_pk PRIMARY KEY,\n\tCITY_NAME    Varchar2(30),\n\tCITY_STATE   Char(2),\n\tPOPULATION   Number(10)\n);\n\n--- Create the shipment table ---\nCREATE TABLE shipment\n(\n   SHIPMENT_ID Char(4)\t   CONSTRAINT ship_id_pk PRIMARY KEY,\n   CUS_ID      Char(4)\t   CONSTRAINT cust_id_fk REFERENCES customer(cus_id),\n   WEIGHT      Number(12,2),\n   TRUCK_ID    Char(4)\t   CONSTRAINT truck_id_fk REFERENCES truck(truck_id),\n   CITY_ID     Varchar2(4) CONSTRAINT city_id_fk  REFERENCES city(city_id),\n   SHIP_DATE   DATE\n);\n\n--- Insert records into customer table ---\nINSERT INTO customer VALUES\n\t('C101','Smith','Joe',3000000.3,'P');\nINSERT INTO customer VALUES\n\t('C102','Sneider','Jenny',7000000.5,'P');\nINSERT INTO customer VALUES\n\t('C103','Robinson','Dan',1000000.8,'C');\nCOMMIT;\n\n--- Insert records into truck table ---\nINSERT INTO truck VALUES\n\t('T101','Dan Brun');\nINSERT INTO truck VALUES\n\t('T102','Bob Lee');\nINSERT INTO truck VALUES\n\t('T104','Jerry Carlson');\nINSERT INTO truck VALUES\n\t('T103','Frank Hong');\nCOMMIT;\n\n--- Insert records into city table ---\nINSERT INTO city VALUES\n\t('101','Dekalb','IL',50000);\nINSERT INTO city VALUES\n\t('201','Lincoln','NE',160000);\nINSERT INTO city VALUES\n\t('301','Houston','TX',800000);\nINSERT INTO city VALUES\n\t('401','Laredo','TX',260000);\nCOMMIT;\n\n--- Insert records into shipment table ---\nINSERT INTO shipment VALUES\n\t('2001','C101',2500.2,'T101','101','12-Apr-2002');\nINSERT INTO shipment VALUES\n\t('2002','C102',7500.7,'T101','201','20-Apr-2002');\nINSERT INTO shipment VALUES\n\t('2003','C103',800000.8,'T103','201','25-May-2002');\nINSERT INTO shipment VALUES\n\t('2004','C102',95.00,'T102','301','02-May-2003');\nINSERT INTO shipment VALUES\n\t('2005','C101',85.00,'T102','401','02-May-2003');\nCOMMIT;\n\n--- Queries 1 - 10 ---\n\n--- How many shipments between 1/1/02 & 5/1/03?\n--- Version 1 shows all records between the given dates\nSELECT *\nFROM   shipment\nWHERE  SHIP_DATE >= '01-Jan-2002' \nAND    SHIP_DATE <= '01-May-2003';\n\n--- Version 2 returns simply a count of all the given dates\nSELECT COUNT(*)\nFROM   shipment\nWHERE  SHIP_DATE >= '01-Jan-2002' \nAND    SHIP_DATE <= '01-May-2003';\n\n--- What is destination city name of shipment id# 2004\nSELECT CITY_NAME\nFROM   shipment,city\nWHERE  SHIPMENT_ID = '2004' \nAND    shipment.CITY_ID = city.CITY_ID;\n\n--- What are the truck ids of trucks that have carried \n--- shipments over 100 lbs?\nSELECT DISTINCT TRUCK_ID\nFROM   shipment\nWHERE  WEIGHT >= 100;\n\n--- Give the Names of customers who have sent shipments to cities \n--- starting with 'L'?\nSELECT CUS_LNAME, CUS_FNAME\nFROM   customer,shipment,city\nWHERE  customer.CUS_ID = shipment.CUS_ID \nAND    shipment.CITY_ID = city.CITY_ID \nAND    city.CITY_NAME LIKE 'L%';\n\n--- What are the names of customers who have sent packages to \n--- Lincoln, NE?\nSELECT CUS_LNAME, CUS_FNAME\nFROM   customer,shipment,city\nWHERE  customer.CUS_ID = shipment.CUS_ID \nAND    shipment.CITY_ID = city.CITY_ID \nAND    city.CITY_NAME = 'Lincoln';\n\n--- Who are the customers having over 5 million in revenue and \n--- have sent less than 100lbs?\nSELECT DISTINCT CUS_FNAME, CUS_LNAME\nFROM   customer, shipment\nWHERE  customer.ANN_REVENUE > 5000000 \nAND    shipment.WEIGHT < 100;\n\n--- For each customer what is the average weight of a package, \n--- show name and avg weight?\nSELECT   CUS_FNAME, CUS_LNAME, AVG(WEIGHT)\nFROM     customer,shipment\nWHERE    customer.CUS_ID = shipment.CUS_ID\nGROUP BY CUS_FNAME, CUS_LNAME;\n\n--- For each city with a population over 100,000 what is the \n--- minimum weight of a package sent there?\nSELECT   CITY_NAME, MIN(WEIGHT)\nFROM     city,shipment\nWHERE    city.POPULATION >= 100000\nAND      city.CITY_ID = shipment.CITY_ID\nGROUP BY CITY_NAME;\n\n--- For each city that has recieved at least 2 packages, what is the \n--- average weight of a package sent to that city?\nSELECT   CITY_NAME, COUNT(SHIPMENT_ID), AVG(WEIGHT)\nFROM     city,shipment\nWHERE    shipment.CITY_ID = city.CITY_ID\nGROUP BY CITY_NAME\nHAVING   COUNT(shipment.CITY_ID) >= 2;\n",
 u'Scheme': "; Syntax Highlighting Test File for Scheme\n; Comments are like this\n\n; Hello World\n(define hello-world\n  (lambda ()\n    (begin\n      (write 'Hello-World)\n      (newline)\n      (hello-world)))) \n\n; Factorial\n(define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n\n",
 u'Smalltalk': '" Syntax Highlighting Test File for Smalltalk "\n" Comments are like this "\n" Hello World in smalltalk "\n\n" Heres helloworld doesnt get much easier that this "\n\'Hello World!\'\n\n" Heres a version in a window "\n| window |\nwindow := Window new.\nwindow label: \'Hello World\'.\nwindow open.\n \n" Character Definition"\n| mychar |\nmychar := $A\n\n" Symbol Definition "\n| mySym |\nmySym := #foo\n\n" Symbol Array "\nmySym := #(1 2 3 4)\n\n" Class Def "\nObject subclass: #MessagePublisher\n    instanceVariableNames: \'\'\n    classVariableNames: \'\'\n    poolDictionaries: \'\'\n    category: \'Smalltalk Examples\'\n\n| rectangles aPoint|\nrectangles := OrderedCollection \n  with: (Rectangle left: 0 right: 10 top: 100 bottom: 200)\n  with: (Rectangle left: 10 right: 10 top: 110 bottom: 210).\naPoint := Point x: 20 y: 20.\ncollisions := rectangles select: [:aRect | aRect containsPoint: aPoint].\n\nresult := a > b\n    ifTrue:[ \'greater\' ]\n    ifFalse:[ \'less\' ]\n',
 u'Squirrel': '// Squirrel Syntax Highlighting Test File\n// Comments are like this\n/** Multiline comments are like this\n * @summary <- Documentation keywords are like this\n */\n\n// Hello World\nprint("Hello World")\n\n// Literals\nlocal a = 123       // Decimal\nlocal b = 0x0012    // Hexadecimal\nlocal c = 075       // Octal\nlocal d = \'w\'       // Char\nlocal e = "string"  // String\nlocal f = "Unclosed string\n\n// Function Definition\nfunction fib(n)\n{\n    if (n < 2) return 1\n    return fib(n-2) + fib(n-1) \n}\n\n// Class Construct\nclass Foo {\n\t//constructor\n\tconstructor(a)\n\t{\n\t\tbar = ["bar", 1, 2, 3];\n\t}\n\n\tfunction PrintBar()\n\t{\n\t\tforeach(i, val in bar)\n\t\t{\n\t\t\t::print("idx = " + i + " = " + val + " \\n");\n\t\t}\n\t}\n}\n',
 u'System Verilog': '// System Verilog Syntax Highlighting Test File\n// Comments are like this\n\npackage oop;\n\nclass BaseScoreboard;\n  string name;\n  bit[3:0] srce, dest;\n  int run_for_n_packets;  // max number of packets to transmit before giving up on coverage goals\n  static int pkts_checked = 0;\n  static int sent_pkt_count = 0;\n  static int recvd_pkt_count = 0;\n  Packet refPkts[$];\n\n  function new(string name = "class", int run_for_n_packets ); \n    if (TRACE_ON) $display("@%0d: %s.new() started", $time, name);\n    this.name = name;\n    this.run_for_n_packets = run_for_n_packets;\n  endfunction : new\n\n  task report();\n    if (TRACE_ON) $display("@%0d: %s.report() started", $time, name);\n    $display("%0d packets sent, %0d packets sampled, %0d packets checked\\n", \n              sent_pkt_count, recvd_pkt_count, pkts_checked);\n  endtask : report\n\nendclass : BaseScoreboard\n\n\nclass Scoreboard extends BaseScoreboard;\n\n  covergroup router_cvg;\n    coverpoint srce;\n    coverpoint dest;\n    cross srce, dest;\n    option.at_least = 1;\n    option.auto_bin_max = 256;\n  endgroup\n\n  function new(string name = "class", int run_for_n_packets ); \n    super.new(name, run_for_n_packets); \n    router_cvg = new();\n  endfunction : new\n\n  task check(Packet pktrecvd);\n    int    index;\n    int    status;\n    string diff;\n    Packet pktsent;\n    if (TRACE_ON) $display("@%0d: %s.check() started", $time, name);\n  endtask\n\n\nendclass : Scoreboard\n\nendpackage : oop\n\n/*****************************************************************************/\n\nprogram test(io_if dutif, input bit clk);\n\nimport oop::*;\n\nbit[3:0] srce, dest;\nreg[7:0] payload[$], pkt2cmp_payload[$];\n\nScoreboard sb;\n\ninitial begin\n  DONE <= 0;\n  sb = new("sb", 2500); \n  pkt2send = new();\n  pkt2send.pt_mode = 1;\n  do begin\n       fork\n         begin send(); end\n         begin recv(); end\n       join\n     end\n  repeat(10) @(posedge clk);\nend\n\ntask automatic recv();\n  static int pkts_recvd = 0;\n  int i;\n  pktrecvd = new($psprintf("Pkt_recvd[%0d]", pkts_recvd++));\n  pktrecvd.payload = new[pkt2cmp_payload.size()];\n  for (i=0; i<pkt2cmp_payload.size(); i++)\n    pktrecvd.payload[i] = pkt2cmp_payload[i];\n  pktrecvd.dest = dest;\nendtask\n\ntask automatic send();\n  int i;\n  payload.delete();\n  for (i=0; i<pkt2send.payload.size(); i++)\n    payload.push_back(pkt2send.payload[i]);\n  srce = pkt2send.srce;\n  dest = pkt2send.dest;\nendtask\n\nendprogram\n\ninterface io(input clock, input bit[15:0] din, frame_n);\nbit [15:0] passthru;\n\nsequence s_pass_thru_0 ;\n  frame_n[ 0] ##1 !frame_n[ 0] ##0 din[ 0] == 0 [*4];  // 0000\nendsequence\n\nproperty p_pass_thru_0 ;\n  @(posedge clk) fr_valid |-> s_pass_thru_0;\nendproperty\n\nassert property (p_pass_thru_0) $info("%m  OK"); \n  else $error("%m Problem");\nendinterface\n\nsequence s_pass_thru_1 ;\n  frame_n[ 1] ##1 !frame_n[ 1] ##0 din[ 1] == 0 [*4];  // 0000\nendsequence\n\nproperty p_pass_thru_1 ;\n  @(posedge clk) fr_valid |-> s_pass_thru_1;\nendproperty\n\nassert property (p_pass_thru_1) $info("%m  OK"); \n  else $error("%m Problem");\nendinterface\n\nmodule top;\nbit clk;\nbit[15:0] din;\nbit frame_n;\n\nio IF1 (.clk, .din, .frame_n);\ntest TB1 (.clk, io_if(IF1) );\n\nendmodule\n',
 u'Tcl/Tk': '# Syntax Highlighting Test File for TCL/TK\n# Comments are like this\n# Hello World in tcl/tk\n\nwm title . "Hello world!"\n\nframe .h -borderwidth 2\nframe .q -borderwidth 2\nbutton .h.hello -text "Hello world" \\\n        -command "puts stdout \\"Hello world!\\"" -cursor gumby\nbutton .q.quit -text "Quit" -command exit -cursor pirate\n\npack .h -side left\npack .q -side right\npack .h.hello\npack .q.quit\n\n# Procedure Definition\nproc printArguments args {\n   foreach arg $args {\n      puts $arg\n   }\n}\n\nproc foo::xxxx {} {\n    set a xxxxxxxxxxxx\n}\nproc foo_bar {} {\n    set b xxxxxxx\n}\n\nproc foo::yyyy {} {\n    set a bbbbbbb\n}\n',
 'Text': "Here is some plain text to test the editor with highlighting in an in active state. This is rather boring isn't it?\n\nHello World\n\n",
 u'VBScript': '\' Syntax Highlighting test file for VBScript\n\' Comments look like this\n\nfunction hello(name) \'comment for function\n\n    on error resume next\n\n    dim x,y\n\n    if name<>"World" then\n        for x = 1 to 10\n            wscript.echo "Hello " & name\n        next\n    else\n        x=0\n        do while x<10\n            wscript.echo "Hello World"\n            x=x+1\n        loop\n    end if\n\n    hello=x+y\n\nend function\n\nPublic Function testPublicFunct()\n    dim c,d\nend Sub\n\nsub testStub()\n    dim a,b\nend sub\n\nPublic Sub testPublicSub()\n    dim c,d\nend Sub\n\n\'---------------------------\n\non error resume next\n\ndim didIt\ndim userid\n\nset WshShell = WScript.CreateObject("WScript.Shell")\n\'Finds the user name from an environment variable\nuserid=wshshell.expandenvironmentstrings("%username%")\n\ndidIt=hello(userid)\n\nwscript.exit(0)\n',
 u'VHDL': '-- Syntax Highlighting Test File for VHDL\n-- Comments are like this\n-- Hello World in VHDL\n\nentity hello_world is\nend;\n  \n architecture hello_world of hello_world is\n begin\n    stimulus : process\n    begin\n      assert false report "Hello World By Deepak"\n      severity note;\n      wait;\n    end process stimulus;\nend hello_world;\n\n-- A simple counter\nlibrary ieee ;\nuse ieee.std_logic_1164.all;\nuse ieee.std_logic_unsigned.all;\n   \nentity counter is \nport(  clk:  in std_logic;\n   reset:  in std_logic;\n   enable:  in std_logic;\n   count:  out std_logic_vector(3 downto 0)\n);\nend counter;\n  \narchitecture behav of counter is         \n  signal pre_count: std_logic_vector(3 downto 0);\n  begin\n    process(clk, enable, reset)\n    begin\n      if reset = \'1\' then\n        pre_count <= "0000";\n      elsif (clk=\'1\' and clk\'event) then\n        if enable = \'1\' then\n          pre_count <= pre_count + "1";\n        end if;\n      end if;\n    end process;  \n    count <= pre_count;\nend behav;\n',
 u'Vala': '// Syntax Highlighting Test File for Vala\n// Comments are like this\n/* Multiline comments are like\n * this.\n */\n\n// Hello World in Vala\nusing GLib;\n\n//! \\summary Documentation keyword\npublic class Sample : Object {\n\n    // Some Variable definitions\n    public static const double ASPECT = 8.0/6.0;\n    static unichar a_char = \'a\';\n\n    public Sample () {\n    }\n\n    public void run () {\n            stdout.printf ("Hello World\\n");\n            stdout.printf ("Unclosed string);\n            stdout.printf (\'a\'); // <- Char\n    }\n\n    static int main (string[] args) {\n            var sample = new Sample ();\n            sample.run ();\n            return 0;\n    }\n}\n',
 u'Verilog': '// Syntax Highlighting Test file for Verilog\n// Some Comments about this file\n\nmodule toplevel(clock,reset);\n input clock;\n input reset;\n\n reg flop1;\n reg flop2;\n\n always @ (posedge reset or posedge clock)\n if (reset)\n   begin\n     flop1 <= 0;\n     flop2 <= 1;\n   end\n else\n   begin\n     flop1 <= flop2;\n     flop2 <= flop1;\n   end\nendmodule\n\ninitial\n fork\n   $write("A");\n   $write("B");\n   begin\n     #1;\n     $write("C");\n   end\n join\n ',
 u'Visual Basic': '\' Visual Basic Hello World\n\' Some more comments about this file\nVERSION 4.00\nBegin VB.Form Form1 \n   Caption         =   "Hello"\n   ClientHeight    =   6030\n   ClientLeft      =   1095\n   ClientTop       =   1515\n   ClientWidth     =   6720\n   Height          =   6435\n   Left            =   1035\n   LinkTopic       =   "Form1"\n   ScaleHeight     =   6030\n   ScaleWidth      =   6720\n   Top             =   1170\n   Width           =   6840\n   Begin VB.CommandButton Command1 \n      Caption         =   "Hello World"\n      Height          =   975\n      Left            =   2040\n      TabIndex        =   0\n      Top             =   2280\n      Width           =   2535\n   End\nEnd\nAttribute VB_Name = "Form1"\nAttribute VB_Creatable = False\nAttribute VB_Exposed = False\nPrivate Sub Command1_Click()\nCls\nPrint "Hello World"\nEnd Sub',
 u'XML': '<!-- Syntax Highlighting Test File for XML -->\n<!-- Comments are like this -->\n<?xml version="1.0" encoding="utf-8"?>\n<rss version="2.0">\n   <channel>\n\t<title>Editra.org</title>\n\t<link>http://editra.org/index.php</link>\n\t<description>Editra Text Editor</description>\n\t<language>en-us</language>\n\t<generator>Editra.org</generator>\n\t<item>\n \t   <title>Cleanup Round 2</title>\n \t   <link>http://editra.org/index.php?artical=helloWorld</link>\n  \t   <description>Hello XML</description>\n\t   <author>admin@editra.org (cody)</author>\n\t   <pubDate>Sat, 11 Nov 2006 17:47:39 -0800</pubDate>\n\t   <guid isPermaLink="true">http://editra.org/index.php?artical=helloWorld</guid>\n\t</item>\n   </channel>\n</rss>\n',
 u'Xtext': '',
 u'YAML': '# Syntax Highlighting Test file for YAML\n# Some Comments about this file\n\n---!myDocument\nlogEvent:    Hello World\ndate:        2007-08-06\ncustomer:\n    given:   Joe\n    family:  Bazooka\n\ngreet:  &id001\n    location: | \n              In Front of you\n\ngreeting:\n    - first: Hello\n      second: World\n\n    - first: Buy my gum\n      second: I give you Comics\n\nspecialGreeting:  >\n    This is a text section of a yaml document all\n    the (xxx:) items are identifiers.\n...\n',
 u'newLISP': '; Syntax Highlighting Test File for newLISP\n; Comments are like this\n\n(context \'EditraTest)\n\n(define (hello)\n  "Says hello."\n  (println "Hello world"))\n\n(define (EditraTest:EditraTest substance (times 10))\n  (let ((n times))\n    (while (> n 0)\n      (println (format "%d bottles of %s on the wall" n (string substance)))\n      (dec \'n)))\n  (println "Time to get to the " substance " store!"))\n\n(context \'MAIN)\n\n(dolist (substance \'("beer" "apple juice" "spam"))\n  (EditraTest substance)\n  (println))\n\n'}